{"version":3,"sources":["components/Output.js","components/Controls/SelectType.js","components/Controls/SelectFormat.js","components/Controls/Text.js","components/App.js","serviceWorker.js","index.js"],"names":["Output","className","this","props","value","Component","Select","onChange","e","changeType","type","target","selected","Text","min","App","val","setState","getSampleText","state","paras","format","text","axios","get","then","res","data","catch","err","console","log","SelectType","SelectFormat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yRAQeA,EANf,uKAEQ,OAAO,yBAAKC,UAAU,QAAQC,KAAKC,MAAMC,WAFjD,GAA4BC,aCkBbC,EAlBf,uKACc,IAAD,OACL,OACI,6BACI,4BACIL,UAAU,eACVM,SAAU,SAACC,GAAD,OACN,EAAKL,MAAMM,WAAW,EAAKN,MAAMO,KAAMF,EAAEG,OAAOP,SAGpD,4BAAQA,MAAM,YAAd,aACA,4BAAQA,MAAM,mBAAd,oBAXpB,GAA4BC,aCmBbC,EAnBf,uKACc,IAAD,OACL,OACI,6BACI,4BACIL,UAAU,eACVM,SAAU,SAACC,GAAD,OACN,EAAKL,MAAMM,WAAW,EAAKN,MAAMO,KAAMF,EAAEG,OAAOP,SAGpD,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAOQ,UAAQ,GAA7B,QACA,4BAAQR,MAAM,QAAd,cAZpB,GAA4BC,aCgBbQ,EAhBf,uKACc,IAAD,OACL,OACI,6BACI,2BACIC,IAAI,IACJb,UAAU,eACVS,KAAK,SACLN,MAAOF,KAAKC,MAAMC,MAClBG,SAAU,SAACC,GAAD,OAAO,EAAKL,MAAMM,WAAW,QAASD,EAAEG,OAAOP,eAT7E,GAA0BC,aCkFXU,EA5Ef,kDACI,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IA2BVM,WAAa,SAACC,EAAMM,GAChB,EAAKC,SAAL,eAESP,EAAOM,GAEZ,EAAKE,gBA/BT,EAAKC,MAAQ,CACTC,MAAO,EACPV,KAAM,WACNW,OAAQ,OACRC,KAAM,IANK,EADvB,gEAYQpB,KAAKgB,kBAZb,sCAeqB,IAAD,SACoBhB,KAAKiB,MAA7BC,EADI,EACJA,MAAOV,EADH,EACGA,KAAMW,EADT,EACSA,OACrBE,IACKC,IADL,2CAE4Cd,EAF5C,kBAE0DU,EAF1D,mBAE0EC,IAErEI,MAAK,SAACC,GACH,EAAKT,SAAS,CACVK,KAAMI,EAAIC,UAGjBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QA1BxC,+BAuCQ,OACI,yBAAK5B,UAAU,4BACX,0DACA,6BACA,0BAAMA,UAAU,eACZ,yBAAKA,UAAU,cACX,2BAAOA,UAAU,QAAjB,SACA,kBAAC+B,EAAD,CACItB,KAAK,OACLN,MAAOF,KAAKiB,MAAMT,KAClBD,WAAYP,KAAKO,cAIzB,yBAAKR,UAAU,mBACX,2BAAOA,UAAU,QAAjB,WACA,kBAACgC,EAAD,CACIvB,KAAK,SACLN,MAAOF,KAAKiB,MAAME,OAClBZ,WAAYP,KAAKO,cAIzB,yBAAKR,UAAU,mBACX,2BAAOA,UAAU,QAAjB,UACA,kBAAC,EAAD,CACIG,MAAOF,KAAKiB,MAAMC,MAClBX,WAAYP,KAAKO,eAI7B,kBAAC,EAAD,CAAQL,MAAOF,KAAKiB,MAAMG,YAtE1C,GAAyBjB,aCIL6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.68e25957.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Output extends Component {\n    render() {\n        return <div className=\"mt-2\">{this.props.value}</div>;\n    }\n}\n\nexport default Output;\n","import React, { Component } from 'react';\n\nexport class Select extends Component {\n    render() {\n        return (\n            <div>\n                <select\n                    className=\"form-control\"\n                    onChange={(e) =>\n                        this.props.changeType(this.props.type, e.target.value)\n                    }\n                >\n                    <option value=\"all-meat\">Meat Only</option>\n                    <option value=\"meat-and-filler\">Meat Mixed</option>\n                </select>\n            </div>\n        );\n    }\n}\n\nexport default Select;\n","import React, { Component } from 'react';\n\nexport class Select extends Component {\n    render() {\n        return (\n            <div>\n                <select\n                    className=\"form-control\"\n                    onChange={(e) =>\n                        this.props.changeType(this.props.type, e.target.value)\n                    }\n                >\n                    <option value=\"json\">JSON</option>\n                    <option value=\"html\" selected>HTML</option>\n                    <option value=\"text\">TEXT</option>\n                </select>\n            </div>\n        );\n    }\n}\n\nexport default Select;\n","import React, { Component } from 'react';\n\nexport class Text extends Component {\n    render() {\n        return (\n            <div>\n                <input\n                    min=\"1\"\n                    className=\"form-control\"\n                    type=\"number\"\n                    value={this.props.value}\n                    onChange={(e) => this.props.changeType(\"paras\", e.target.value)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Text;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Output from './Output';\nimport SelectType from './Controls/SelectType';\nimport SelectFormat from './Controls/SelectFormat';\nimport Text from './Controls/Text';\n\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paras: 4,\n            type: 'all-meat',\n            format: 'html',\n            text: '',\n        };\n    }\n\n    componentDidMount() {\n        this.getSampleText();\n    }\n\n    getSampleText() {\n        const { paras, type, format } = this.state;\n        axios\n            .get(\n                `https://baconipsum.com/api/?type=${type}&paras=${paras}&format=${format}`\n            )\n            .then((res) => {\n                this.setState({\n                    text: res.data,\n                });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    changeType = (type, val) => {\n        this.setState(\n            {\n                [type]: val,\n            },\n            this.getSampleText\n        );\n    };\n\n    render() {\n        return (\n            <div className=\"container container mt-4\">\n                <h1>Bacon Ipsum Text Generator</h1>\n                <hr />\n                <form className=\"form-inline\">\n                    <div className=\"form-group\">\n                        <label className=\"mr-2\">Type:</label>\n                        <SelectType\n                            type=\"type\"\n                            value={this.state.type}\n                            changeType={this.changeType}\n                        />\n                    </div>\n\n                    <div className=\"form-group ml-3\">\n                        <label className=\"mr-2\">Format:</label>\n                        <SelectFormat\n                            type=\"format\"\n                            value={this.state.format}\n                            changeType={this.changeType}\n                        />\n                    </div>\n\n                    <div className=\"form-group ml-3\">\n                        <label className=\"mr-2\">Paras:</label>\n                        <Text\n                            value={this.state.paras}\n                            changeType={this.changeType}\n                        />\n                    </div>\n                </form>\n                <Output value={this.state.text} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}